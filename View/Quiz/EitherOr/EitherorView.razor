@page "/quiz/eitheror"

@using kanavrt.Controller.Quiz
@using kanavrt.Model
@using kanavrt.Model.Statistics
@using kanavrt.Model.Settings

@inject KanaModel kanaModel
@inject SettingsModel settingsModel
@inject EitherOrController controller

<PageTitle>Either-or mode | KANAVRT</PageTitle>

<QuizSideNavView></QuizSideNavView>

@if (controller.isError) {
	<ErrorView Message="@(controller.Error.Message)" Solution="@(controller.Error.Solution)" Value="@(controller.Error.Value)"></ErrorView>
} else {
	@code {
		string ClickedLatin = "";
		int index = new Random().Next(0, 2);
		Task ?main = null;
		private ProgressBarView progressBar;

		async Task checkClick(string syllable) {
			if (main != null && !main.IsCompleted) return;

			ClickedLatin = kanaModel.lookup[syllable].Latin[0];

			progressBar.updateProgressBar(ClickedLatin);

			await Task.Delay(1000);
			controller.Update(syllable);

			index = new Random().Next(0, 2);
		}

		async Task updateViewer(string syllable) {
			if (main != null && !main.IsCompleted) return;

			main = checkClick(syllable);
			await main;
		}

		async Task resetController() {
			if (main != null) await main;
			controller.Reset_();
		}
	}

	string[] guesses = { controller.CorrectSyllable, controller.WrongSyllable };
	string CurrentLatin = kanaModel.lookup[controller.CorrectSyllable].Latin[0];
	for (int i = 1; i < kanaModel.lookup[controller.CorrectSyllable].Latin.Length; i++) {
		CurrentLatin += ", " + kanaModel.lookup[controller.CorrectSyllable].Latin[i];
	}

	string guessButtonState(string syllable) {
		string latin = kanaModel.lookup[syllable].Latin[0];
		if (main != null && !main.IsCompleted) {
			return controller.IsCorrect(latin) ? "guess-button-correct" : "guess-button-wrong";
		}

		return "";
	}

	string latinGuessState() {
		if (main != null && !main.IsCompleted) {
			return controller.IsCorrect(ClickedLatin) ? "latin-guess-correct" : "latin-guess-wrong";
		}

		return "";
	}

	<article>
		<h4>EITHER OR MODE</h4>

		<section>
			<ProgressBarView controller="@controller" handleReset="resetController" @ref="progressBar"></ProgressBarView>

			<button style="font-family: @(settingsModel.lookup[settingsModel.Font]);" class="guess-button @guessButtonState(@guesses[index])" @onclick="() => updateViewer(guesses[index])">
				@guesses[index]
			</button>

			<p class="latin-guess @latinGuessState()">@CurrentLatin</p>

			<button style="font-family: @(settingsModel.lookup[settingsModel.Font]);" class="guess-button @guessButtonState(@guesses[1 - index])" @onclick="() => updateViewer(guesses[1 - index])">
				@guesses[1 - index]
			</button>
		</section>
	</article>
}
