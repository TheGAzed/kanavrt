@using kanavrt.Controller.Quiz

@inject IJSRuntime JS

@code {
	[Parameter]
	public AbstractQuizController controller { get; set; }

	[Parameter]
	public EventCallback<bool> controllerChanged { get; set; }

	double leftBar = 0;
	double rightBar = 0;

	string transition = "transition: width 1500ms ease-in-out;";


	public void updateProgressBar(string latin) {
		int correct = controller.CorrectGuesses, wrong = controller.WrongGuesses;

		if (controller.IsCorrect(latin)) correct++;
		else wrong++;

		double sum = correct + wrong;
		rightBar = (correct / sum) * 100;
		leftBar = (wrong / sum) * 100;
	}

	private void resetProgressBar() {
		transition = "transition: none;";

		leftBar = rightBar = 0;

		Task.Delay(50).ContinueWith(_ => {
			transition = "transition: width 1500ms ease-in-out;";
		});
	}

	[Parameter]
	public EventCallback handleReset { get; set; }

	private async Task TriggerReset () {
		await handleReset.InvokeAsync();
		resetProgressBar();
	}
}

<div class="info-bar">
	<div class="progress-bar" title="WRONG GUESSES: @(controller.WrongGuesses)">
		<div class="left-progress" style="width: calc(@(leftBar)% - 1.05rem); @(transition)"></div>
        <small class="progress-count">@(controller.WrongGuesses)</small>
    </div>

	<input type="button" class="bar-button" name="reset-button" />
	<label class="bar-button" for="reset-button" @onclick="TriggerReset">
		<img src="img/svg/quiz/arrow-clockwise.svg" alt="next icon" />
	</label>

	<div class="progress-bar" title="CORRECT GUESSES: @(controller.CorrectGuesses)">
		<small class="progress-count">@(controller.CorrectGuesses)</small>
		<div class="right-progress" style="width: calc(@(rightBar)% - 1.05rem); @(transition)"></div>
	</div>
</div>