@page "/quiz/keyboard"

@using kanavrt.Model
@using kanavrt.Model.Statistics
@using kanavrt.Model.Settings
@using kanavrt.Controller.Quiz
@using System.Text.RegularExpressions

@inject KanaModel kanaModel
@inject SettingsModel settingsModel
@inject KeyboardController controller
@inject IJSRuntime JS

<PageTitle>Keyboard mode | KANAVRT</PageTitle>

<QuizSideNavView></QuizSideNavView>

@if (controller.isError) {
	<ErrorView Message="@(controller.Error.Message)" Solution="@(controller.Error.Solution)" Value="@(controller.Error.Value)"></ErrorView>
} else {
	@code {
	bool isDigraph   = false;
	bool isDiacritic = false;

	Regex regex = new("([AIUEO])|([KSTNHMYRMCFGZDBPJ])(YA|YU|YO|[AIUEO])|([KSTNHMYRMCFGZDBPJ])([KSTNHMYRMCFGZDBPJ])(YA|YU|YO|[AIUEO])|([KSTNHMYRMCFGZDBPJ])([KSTNHMYRMCFGZDBPJ])|([KSTNHMYRMCFGZDBPJ])");

	Dictionary<string, string> lookupState = new() {
			{ "A" , "roman-character-default" }, { "I" , "roman-character-default" }, { "U" , "roman-character-default" }, { "E" , "roman-character-default" },
			{ "O" , "roman-character-default" },

			{ "YA" , "roman-character-default" }, { "YU" , "roman-character-default" }, { "YO" , "roman-character-default" },

			{ "K" , "roman-character-default" }, { "S" , "roman-character-default" }, { "T" , "roman-character-default" }, { "N" , "roman-character-default" },
			{ "H" , "roman-character-default" }, { "M" , "roman-character-default" }, { "Y" , "roman-character-default" }, { "R" , "roman-character-default" },
			{ "W" , "roman-character-default" }, { "C" , "roman-character-default" }, { "F" , "roman-character-default" },

			{ "G" , "roman-character-default" }, { "Z" , "roman-character-default" }, { "D" , "roman-character-default" }, { "B" , "roman-character-default" },
			{ "P" , "roman-character-default" }, { "J" , "roman-character-default" },
		};

	HashSet<string> digraphSet        = new() { "YA", "YU", "YO", };
	HashSet<string> diacriticGraphSet = new() { "G", "Z", "D", "B", "P", "J", };
	HashSet<string> keyboardSet = new() { "A", "I", "U", "E", "O", "K", "S", "T", "N", "H", "M", "Y", "R", "W", "C", "F", "G", "Z", "D", "B", "P", "J" };

	string FullLatin = "";
	string PartiaLatin = "";
	Task? main = null;
	private ProgressBarView progressBar;
	protected ElementReference section;

	async Task checkClick(string character) {
		if (main != null && !main.IsCompleted) return;
		if (FullLatin.Contains(character[0])) return;

		FullLatin += character;
		PartiaLatin = FullLatin;

		updateLookup(PartiaLatin);

		if (controller.IsPartial(PartiaLatin) == controller.IsCorrect(PartiaLatin)) {
			progressBar.updateProgressBar(FullLatin);
			if (!controller.IsCorrect(PartiaLatin)) FullLatin = kanaModel.lookup[controller.CorrectSyllable].Latin[0];
			await Task.Delay(1000);
		}

		controller.Update(character);

		if (controller.IsPartial(PartiaLatin) == controller.IsCorrect(PartiaLatin)) {
			resetLookup(PartiaLatin);
			resetLookup(FullLatin);
			PartiaLatin = FullLatin = string.Empty;
		}
	}

	async Task updateViewer(string syllable) {
		if (main != null && !main.IsCompleted) return;

		main = checkClick(syllable);
		await main;
	}

	async Task resetController() {
		if (main != null) await main;
		controller.Reset_();
	}

	void resetLookup(string latin) {
		Match latinMatch = regex.Match(latin);
		foreach (Group g in latinMatch.Groups) {
			if (lookupState.ContainsKey(g.Value)) {
				lookupState[g.Value] = "roman-character-default";
			}
		}
	}

	void updateLookup(string latin) {
		string partial = latin.Remove(latin.Length - 1);

		resetLookup(partial);

		Match latinlMatch = regex.Match(latin);
		string characterState = string.Empty;
		if (!controller.IsPartial(latin)) {
			characterState = "roman-character-wrong";
		} else if (controller.IsCorrect(latin)) {
			characterState = "roman-character-correct";
		} else {
			characterState = "roman-character-partial";
		}

		foreach (Group g in latinlMatch.Groups) {
			if (lookupState.ContainsKey(g.Value)) {
				isDigraph = isDigraph || digraphSet.Contains(g.Value) ? true : false;
				isDiacritic = isDiacritic || diacriticGraphSet.Contains(g.Value) ? true : false;

				lookupState[g.Value] = characterState;
			}
		}
	}
	protected async override Task OnAfterRenderAsync(bool firstRender) {
		if (firstRender) {
			await JS.InvokeVoidAsync("SetFocusToElement", section);
		}
	}

	protected async void HandleKeypress(KeyboardEventArgs input) {
		if (main != null && !main.IsCompleted) return;

		string setInput = input.Key.ToUpper();
		if (keyboardSet.Contains(setInput)) {
			main = checkClick(setInput);
			await main;
			StateHasChanged();
		}
	}
}

	<article>
		<h4>KEYBOARD MODE</h4>

		<section @ref="section" @onkeydown="HandleKeypress" tabindex="0">
			<ProgressBarView controller="@controller" handleReset="resetController" @ref="progressBar"></ProgressBarView>

			<p style="font-family: @(settingsModel.lookup[settingsModel.Font]);" class="japanese-character">@(controller.CorrectSyllable)</p>

			<p class="latin-guess">@(FullLatin)</p>

			<table class="keyboard">
				<tr id="graphs">
					<td id="graph-toggle">
						<InputCheckbox @bind-Value="isDigraph" id="graph-toggle-button" DisplayName="graph-toggle-button" style="display: none;" />
						<label for="graph-toggle-button" id="graph-toggle-button">GC</label>
					</td>

					<td id="graph-input">
						@if (!isDigraph) {
							<button @onclick='() => updateViewer("A")' class="roman-character @(lookupState["A"])">A</button>
							<button @onclick='() => updateViewer("I")' class="roman-character @(lookupState["I"])">I</button>
							<button @onclick='() => updateViewer("U")' class="roman-character @(lookupState["U"])">U</button>
							<button @onclick='() => updateViewer("E")' class="roman-character @(lookupState["E"])">E</button>
							<button @onclick='() => updateViewer("O")' class="roman-character @(lookupState["O"])">O</button>
						} else {
							<button @onclick='() => updateViewer("YA")' class="roman-character @(lookupState["YA"])">YA</button>
							<button class="roman-character roman-character-unset">I</button>
							<button @onclick='() => updateViewer("YU")' class="roman-character @(lookupState["YU"])">YU</button>
							<button class="roman-character roman-character-unset">E</button>
							<button @onclick='() => updateViewer("YO")' class="roman-character @(lookupState["YO"])">YO</button>
						}
					</td>
				</tr>

				<tr id="diacritics">
					<td id="diacritic-toggle">
						<InputCheckbox @bind-Value="isDiacritic" id="diacritic-toggle-button" DisplayName="diacritic-toggle-button" style="display: none;" />
						<label for="diacritic-toggle-button" id="diacritic-toggle-button">DC</label>
					</td>

					<td id="diacritic-input">
						@if (!isDiacritic) {
							<button @onclick='() => updateViewer("K")' class="roman-character @(lookupState["K"])">K</button>
							<button @onclick='() => updateViewer("S")' class="roman-character @(lookupState["S"])">S</button>
							<button @onclick='() => updateViewer("T")' class="roman-character @(lookupState["T"])">T</button>
							<button @onclick='() => updateViewer("N")' class="roman-character @(lookupState["N"])">N</button>
							<button @onclick='() => updateViewer("H")' class="roman-character @(lookupState["H"])">H</button>
							<button class="roman-character roman-character-unset">P</button>
							<button @onclick='() => updateViewer("M")' class="roman-character @(lookupState["M"])">M</button>
							<button @onclick='() => updateViewer("Y")' class="roman-character @(lookupState["Y"])">Y</button>
							<button @onclick='() => updateViewer("R")' class="roman-character @(lookupState["R"])">R</button>
							<button @onclick='() => updateViewer("W")' class="roman-character @(lookupState["W"])">W</button>
							<button class="roman-character roman-character-empty"></button>
							<button @onclick='() => updateViewer("C")' class="roman-character @(lookupState["C"])">C</button>
							<button @onclick='() => updateViewer("F")' class="roman-character @(lookupState["F"])">F</button>
							<button class="roman-character roman-character-unset">J</button>
							<button class="roman-character roman-character-empty"></button>
						} else {
							<button @onclick='() => updateViewer("G")' class="roman-character @(lookupState["G"])">G</button>
							<button @onclick='() => updateViewer("Z")' class="roman-character @(lookupState["Z"])">Z</button>
							<button @onclick='() => updateViewer("D")' class="roman-character @(lookupState["D"])">D</button>
							<button class="roman-character roman-character-unset">N</button>
							<button @onclick='() => updateViewer("B")' class="roman-character @(lookupState["B"])">B</button>
							<button @onclick='() => updateViewer("P")' class="roman-character @(lookupState["P"])">P</button>
							<button class="roman-character roman-character-unset">M</button>
							<button class="roman-character roman-character-unset">Y</button>
							<button class="roman-character roman-character-unset">R</button>
							<button class="roman-character roman-character-unset">W</button>
							<button class="roman-character  roman-character-empty"></button>
							<button class="roman-character roman-character-unset">C</button>
							<button class="roman-character roman-character-unset">F</button>
							<button @onclick='() => updateViewer("J")' class="roman-character @(lookupState["J"])">J</button>
							<button class="roman-character  roman-character-empty"></button>
						}
					</td>
				</tr>
			</table>
		</section>
	</article>
}

